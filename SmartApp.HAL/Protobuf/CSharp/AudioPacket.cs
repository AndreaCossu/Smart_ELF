// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AudioPacket.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SmartApp.HAL.Model {

  /// <summary>Holder for reflection information generated from AudioPacket.proto</summary>
  public static partial class AudioPacketReflection {

    #region Descriptor
    /// <summary>File descriptor for AudioPacket.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AudioPacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFBdWRpb1BhY2tldC5wcm90byJvCg9BdWRpb0RhdGFQYWNrZXQSEQoJdGlt",
            "ZXN0YW1wGAEgASgDEhIKCnNhbXBsZVJhdGUYAiABKAUSEAoIY2hhbm5lbHMY",
            "AyABKAUSFQoNYml0c1BlclNhbXBsZRgEIAEoBRIMCgRkYXRhGAUgASgMQhWq",
            "AhJTbWFydEFwcC5IQUwuTW9kZWxiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SmartApp.HAL.Model.AudioDataPacket), global::SmartApp.HAL.Model.AudioDataPacket.Parser, new[]{ "Timestamp", "SampleRate", "Channels", "BitsPerSample", "Data" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AudioDataPacket : pb::IMessage<AudioDataPacket> {
    private static readonly pb::MessageParser<AudioDataPacket> _parser = new pb::MessageParser<AudioDataPacket>(() => new AudioDataPacket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioDataPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmartApp.HAL.Model.AudioPacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioDataPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioDataPacket(AudioDataPacket other) : this() {
      timestamp_ = other.timestamp_;
      sampleRate_ = other.sampleRate_;
      channels_ = other.channels_;
      bitsPerSample_ = other.bitsPerSample_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioDataPacket Clone() {
      return new AudioDataPacket(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "sampleRate" field.</summary>
    public const int SampleRateFieldNumber = 2;
    private int sampleRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SampleRate {
      get { return sampleRate_; }
      set {
        sampleRate_ = value;
      }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 3;
    private int channels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channels {
      get { return channels_; }
      set {
        channels_ = value;
      }
    }

    /// <summary>Field number for the "bitsPerSample" field.</summary>
    public const int BitsPerSampleFieldNumber = 4;
    private int bitsPerSample_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BitsPerSample {
      get { return bitsPerSample_; }
      set {
        bitsPerSample_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioDataPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioDataPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (SampleRate != other.SampleRate) return false;
      if (Channels != other.Channels) return false;
      if (BitsPerSample != other.BitsPerSample) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (SampleRate != 0) hash ^= SampleRate.GetHashCode();
      if (Channels != 0) hash ^= Channels.GetHashCode();
      if (BitsPerSample != 0) hash ^= BitsPerSample.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (SampleRate != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SampleRate);
      }
      if (Channels != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Channels);
      }
      if (BitsPerSample != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BitsPerSample);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (SampleRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SampleRate);
      }
      if (Channels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channels);
      }
      if (BitsPerSample != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BitsPerSample);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioDataPacket other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.SampleRate != 0) {
        SampleRate = other.SampleRate;
      }
      if (other.Channels != 0) {
        Channels = other.Channels;
      }
      if (other.BitsPerSample != 0) {
        BitsPerSample = other.BitsPerSample;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 16: {
            SampleRate = input.ReadInt32();
            break;
          }
          case 24: {
            Channels = input.ReadInt32();
            break;
          }
          case 32: {
            BitsPerSample = input.ReadInt32();
            break;
          }
          case 42: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
