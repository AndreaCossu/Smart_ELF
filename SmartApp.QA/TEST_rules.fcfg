####################
# STARTING TOKEN
####################

#% start CS
% start TV

###############
# GRAMMAR RULES
###############

##############################
#ACCUMULATOR RULES DEFINITION
##############################

#####Apposition Addition#####
#TODO: decide if to force AAPPO to be HAN=1

PNP[SEM=<app(?o,?p)>,HAN=0] -> AAPPO[SEM=?p] PNP[SEM=?o,HAN=1]
PNP[SEM=<app(?o,?p)>,HAN=1] -> AAPPO[SEM=?p] PNP[SEM=?o,HAN=2]
PNP[SEM=<app(?o,?p)>,HAN=2] -> AAPPO[SEM=?p] PNP[SEM=?o,HAN=3]
PNP[SEM=<app(?o,?p)>,HAN=3] -> AAPPO[SEM=?p] PNP[SEM=?o,HAN=4]
#...

RECU_PNP[SEM=?s,SEMD=<\P.(DRS([x],[])+P(x))>,HAN=0] -> PNOUN[SEM=?s]
RECU_PNP[SEM=?s,SEMD=<\P H.(DRS([x],[])+P(x)+H(x))>,HAN=1] -> PNOUN[SEM=?s]
RECU_PNP[SEM=?s,SEMD=<\P Q H.(DRS([x],[])+P(x)+Q(x)+H(x))>,HAN=2] -> PNOUN[SEM=?s]
RECU_PNP[SEM=?s,SEMD=<\P Q R H.(DRS([x],[])+P(x)+Q(x)+R(x)+H(x))>,HAN=3] -> PNOUN[SEM=?s]
RECU_PNP[SEM=?s,SEMD=<\P Q R S H.(DRS([x],[])+P(x)+Q(x)+R(x)+S(x)+H(x))>,HAN=4] -> PNOUN[SEM=?s]
RECU_PNP[SEM=?s,SEMD=<\P Q R S T H.(DRS([x],[])+P(x)+Q(x)+R(x)+S(x)+T(x)+H(x))>,HAN=5] -> PNOUN[SEM=?s]
#...

#####Determinants Addition#####
#TODO: try to set a fix the right/left path of determinants addition
#TODO: decide if to force DET to be HAN=1

UCNP[SEM=<app(?o,?p)>,HAN=0] -> DET[SEM=?p] UCNP[SEM=?o,HAN=1]
UCNP[SEM=<app(?o,?p)>,HAN=1] -> DET[SEM=?p] UCNP[SEM=?o,HAN=2]
UCNP[SEM=<app(?o,?p)>,HAN=2] -> DET[SEM=?p] UCNP[SEM=?o,HAN=3]
UCNP[SEM=<app(?o,?p)>,HAN=3] -> DET[SEM=?p] UCNP[SEM=?o,HAN=4]
#...

UCNP[SEM=<app(?o,?p)>,HAN=0] -> UCNP[SEM=?o,HAN=1] DET[SEM=?p]
UCNP[SEM=<app(?o,?p)>,HAN=1] -> UCNP[SEM=?o,HAN=2] DET[SEM=?p]
UCNP[SEM=<app(?o,?p)>,HAN=2] -> UCNP[SEM=?o,HAN=3] DET[SEM=?p]
UCNP[SEM=<app(?o,?p)>,HAN=3] -> UCNP[SEM=?o,HAN=4] DET[SEM=?p]
#...

RECU_UCNP[SEM=?s,SEMD=<\P.(DRS([],[])+P(x))>,HAN=0] -> CNOUN[SEM=?s]
RECU_UCNP[SEM=?s,SEMD=<\P H.(DRS([x],[])+P(x)+H(x))>,HAN=1] -> CNOUN[SEM=?s]
RECU_UCNP[SEM=?s,SEMD=<\P Q H.(DRS([x],[])+P(x)+Q(x)+H(x))>,HAN=2] -> CNOUN[SEM=?s]
RECU_UCNP[SEM=?s,SEMD=<\P Q R H.(DRS([x],[])+P(x)+Q(x)+R(x)+H(x))>,HAN=3] -> CNOUN[SEM=?s]
RECU_UCNP[SEM=?s,SEMD=<\P Q R S H.(DRS([x],[])+P(x)+Q(x)+R(x)+S(x)+H(x))>,HAN=4] -> CNOUN[SEM=?s]
RECU_UCNP[SEM=?s,SEMD=<\P Q R S T H.(DRS([x],[])+P(x)+Q(x)+R(x)+S(x)+T(x)+H(x))>,HAN=5] -> CNOUN[SEM=?s]
#...

#####Complex Verbal Forms#####
#enriching a verb with auxiliary, servile, passive, ...
#TODO: VERB_ADD is treated poorly syntactically, with no semantic meaning, decide if this is correct
#TODO: decide if to force VERB_ADD to be HAN=1

TV[SEM=?o,PRON=?n,HAN=?d,PRED=?p] -> VERB_ADD[PRON=?n] TV[SEM=?o,HAN=?d,PRED=?p]
#...

RECU_TV[SEM=?s,SEMD=<\P.(DRS([],[])+P(x))>,HAN=0,PRED=?p] -> BASE_TV[SEM=?s,PRED=?p]
RECU_TV[SEM=?s,SEMD=<\P H.(DRS([x],[])+P(x)+H(x))>,HAN=1,PRED=?p] -> BASE_TV[SEM=?s,PRED=?p]
RECU_TV[SEM=?s,SEMD=<\P Q H.(DRS([x],[])+P(x)+Q(x)+H(x))>,HAN=2,PRED=?p] -> BASE_TV[SEM=?s,PRED=?p]
RECU_TV[SEM=?s,SEMD=<\P Q R H.(DRS([x],[])+P(x)+Q(x)+R(x)+H(x))>,HAN=3,PRED=?p] -> BASE_TV[SEM=?s,PRED=?p]
RECU_TV[SEM=?s,SEMD=<\P Q R S H.(DRS([x],[])+P(x)+Q(x)+R(x)+S(x)+H(x))>,HAN=4,PRED=?p] -> BASE_TV[SEM=?s,PRED=?p]
RECU_TV[SEM=?s,SEMD=<\P Q R S T H.(DRS([x],[])+P(x)+Q(x)+R(x)+S(x)+T(x)+H(x))>,HAN=5,PRED=?p] -> BASE_TV[SEM=?s,PRED=?p]
#...

#####Complex Sentence#####
#TODO: decide if to force COMPL to be HAN=1

CS[SEM=<app(?o,?p)>,DEP=0] -> COMPL[SEM=?p] CS[SEM=?o,DEP=1]
CS[SEM=<app(?o,?p)>,DEP=1] -> COMPL[SEM=?p] CS[SEM=?o,DEP=2]
CS[SEM=<app(?o,?p)>,DEP=2] -> COMPL[SEM=?p] CS[SEM=?o,DEP=3]
CS[SEM=<app(?o,?p)>,DEP=3] -> COMPL[SEM=?p] CS[SEM=?o,DEP=4]
#...

CS[SEM=<app(?o,?p)>,DEP=0] -> CS[SEM=?o,DEP=1] COMPL[SEM=?p]
CS[SEM=<app(?o,?p)>,DEP=1] -> CS[SEM=?o,DEP=2] COMPL[SEM=?p]
CS[SEM=<app(?o,?p)>,DEP=2] -> CS[SEM=?o,DEP=3] COMPL[SEM=?p]
CS[SEM=<app(?o,?p)>,DEP=3] -> CS[SEM=?o,DEP=4] COMPL[SEM=?p]
#...

REC_ACC[SEM=?s,SEMD=<\P.(DRS([],[])+P(x))>,DEP=0] -> MS[PRED=?s]
REC_ACC[SEM=?s,SEMD=<\P H.(DRS([x],[])+P(x)+H(x))>,DEP=1] -> MS[PRED=?s]
REC_ACC[SEM=?s,SEMD=<\P Q H.(DRS([x],[])+P(x)+Q(x)+H(x))>,DEP=2] -> MS[PRED=?s]
REC_ACC[SEM=?s,SEMD=<\P Q R H.(DRS([x],[])+P(x)+Q(x)+R(x)+H(x))>,DEP=3] -> MS[PRED=?s]
REC_ACC[SEM=?s,SEMD=<\P Q R S H.(DRS([x],[])+P(x)+Q(x)+R(x)+S(x)+H(x))>,DEP=4] -> MS[PRED=?s]
REC_ACC[SEM=?s,SEMD=<\P Q R S T H.(DRS([x],[])+P(x)+Q(x)+R(x)+S(x)+T(x)+H(x))>,DEP=5] -> MS[PRED=?s]
#...

#########################
#ITALIAN GRAMMAR RULES
#########################
#TODO:add number (NUM) and gender (GEN) checks!!

#####SENTENCES#####

#####Complex Sentence#####
#defined recursively to add complements
CS[SEM=<app(?t,?r)>,DEP=?d] -> REC_ACC[SEM=?r,SEMD=?t,DEP=?d]

MS[SEM=<app(?n,?v)>,HAN=0,PRED=?p] -> VP[SEM=?v,PRON=?n,HAN=0,PRED=?p]

#####NOUN PHRASES#####
#defined recursively to add determinants
UCNP[SEM=<app(?t,?r)>,HAN=?d] -> RECU_UCNP[SEM=?r,SEMD=?t,HAN=?d]

NP[SEM=?n,HAN=?d] -> PNP[SEM=?n,HAN=?d]

#####Articled Noun Phrase#####
#TODO: decide if using CNP for ART UCNP
NP[SEM=?n,HAN=?d] -> ART[] UCNP[SEM=?n,HAN=?d]
NP[SEM=?n,HAN=?d] -> ART[] UPNP[SEM=?n,HAN=?d]

#####Proper Noun Phrase#####
#defined recursively to add appositions
PNP[SEM=<app(?t,?r)>,HAN=?d] -> RECU_PNP[SEM=?r,SEMD=?t,HAN=?d]

#####Unarticled Noun Phrase#####

UPNP[SEM=<app(?r,?n)>,HAN=0] -> UAPPO[SEM=?n] NP[SEM=?r,HAN=1]
UPNP[SEM=<app(?r,?n)>,HAN=1] -> UAPPO[SEM=?n] NP[SEM=?r,HAN=2]
UPNP[SEM=<app(?r,?n)>,HAN=2] -> UAPPO[SEM=?n] NP[SEM=?r,HAN=3]

#####VERBAL PHRASES#####

VP[SEM=<app(?v,?o)>,PRON=?n,HAN=0,PRED=?p] -> TV[SEM=?v,PRON=?n,HAN=1,PRED=?p] OBJ[SEM=?o,HAN=1]
VP[SEM=<app(?v,?o)>,PRON=?n,HAN=1,PRED=?p] -> TV[SEM=?v,PRON=?n,HAN=2,PRED=?p] OBJ[SEM=?o,HAN=1]
VP[SEM=<app(?v,?o)>,PRON=?n,HAN=2,PRED=?p] -> TV[SEM=?v,PRON=?n,HAN=3,PRED=?p] OBJ[SEM=?o,HAN=1]

#####Transitive Verbs#####
#TODO: VERB_ADD bring no semantic meaning, they're just syntactic
#defined recursively to add VERB_ADDs (auxiliary, servile, passive forms, ...)
TV[SEM=?r,HAN=?d,PRED=?p] -> RECU_TV[SEM=?r,SEMD=?t,HAN=?d,PRED=?p]
BASE_TV[SEM=?v,PRED=?p] -> IFTV[SEM=?v,PRED=?p]

#####Verb Additions#####
#TODO: add auxiliary verbs and passive forms and, maybe, add a semantic
VERB_ADD[PRON=?p] -> SERV[PRON=?p]

#####APPOSITIONS#####

#####Articled Apposition#####
#TODO: define apposizione (both ART+CNOUN or PNOUN)
#AAPPO
#AAPPO

#####Unrticled Apposition#####
UAPPO[SEM=?n] -> CNOUN[SEM=?n]

#####DETERMINANTS#####
#TODO: define adjectives as determinants
#TODO: discern between determinants complements (introduced by 'di','con',derivates,...) and non-determinants complements (others)
#TODO: DET -> COMPL rules creates a cycle (DET -> COMPL -> UCNP -> DET) and this can be a problem

DET[SEM=?c] -> COMPL[SEM=?c]

#####COMPLEMENTS#####
#TODO: define other complements
#TODO: decide if other HAN levels are needed

COMPL[SEM=<app(?p,?n)>,HAN=0] -> AP[SEM=?p] UPNP[SEM=?n,HAN=1]
#TODO: discover why it doesn't work (actually now it isn't causing issues, but must be investigated the same)
#COMPL[SEM=<app(?p,?n)>,HAN=0] -> AP[SEM=?p] UCNP[SEM=?n,HAN=1]
COMPL[SEM=?c] -> ADV[SEM=?c]

OBJ[SEM=?c,HAN=?d] -> NP[SEM=?c,HAN=?d]

###############
#LEXICON RULES
###############

#####ARTICLES#####

ART[] -> 'la'

#####PREPOSITIONS#####

#####Simple Prepositions#####

#####Articled Prepositions#####
AP[SEM=<\X x.(X(\y.(DRS([],[belong(x,y)]))))>] -> 'del'

#####NOUNS#####

#####Proper Nouns#####
PNOUN[SEM=<\x.(DRS([],[Attardi(x)]))>] -> 'Attardi'

#####Common Nouns#####
CNOUN[SEM=<\x.(DRS([],[professor(x)]))>] -> 'professor'
CNOUN[SEM=<\x.(DRS([],[lecture(x)]))>] -> 'lezione'

#####ADVERBS#####

ADV[SEM=<\x.(DRS([],[unknown(x),target(x),location(x)]))>] -> 'dove'

#####VERBS#####

#####Servile Verbs#####
SERV[PRON=<\P.(DRS([x],[subject(x),singular(x),1stperson(x)])+P(x))>] -> 'posso'

#####Infinite-form transitive verbs#####
IFTV[SEM=<\X x.(X(\y.\v.(DRS([],[locate(v),RDF(x,v,y)]))))>,PRED=<\x.(DRS([],[predicate(x),locate(x)]))>] -> 'trovare'
